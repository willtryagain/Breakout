# Generated by CodiumAI
import unittest

from sprite import Sprite


class TestSprite(unittest.TestCase):
    # Creating a new instance of Sprite with valid x and y coordinates should set the x and y properties accordingly.
    def test_valid_coordinates(self):
        sprite = Sprite(1, 2)
        self.assertEqual(sprite.x, 1)
        self.assertEqual(sprite.y, 2)

    # Calling the move() method with valid x and y coordinates should update the x and y properties accordingly.
    def test_move_valid_coordinates(self):
        sprite = Sprite(1, 2)
        sprite.move(3, 4)
        self.assertEqual(sprite.x, 4)
        self.assertEqual(sprite.y, 6)

    # Calling the move_to() method with valid x and y coordinates should update the x and y properties accordingly.
    def test_move_to_valid_coordinates(self):
        sprite = Sprite(1, 2)
        sprite.move_to(3, 4)
        self.assertEqual(sprite.x, 3)
        self.assertEqual(sprite.y, 4)

    # Creating a new instance of Sprite with invalid x or y coordinates should raise an exception.
    def test_invalid_coordinates(self):
        with self.assertRaises(Exception):
            Sprite("a", 2)
        with self.assertRaises(Exception):
            Sprite(1, "b")

    # Calling the move_up() method with a negative distance should raise an exception.
    def test_move_up_negative_distance(self):
        sprite = Sprite(1, 2)
        with self.assertRaises(ValueError):
            sprite.move_up(-1)

    # Calling the move_down() method with a negative distance should raise an exception.
    def test_move_down_negative_distance(self):
        sprite = Sprite(1, 2)
        with self.assertRaises(ValueError):
            sprite.move_down(-1)


if __name__ == "__main__":
    unittest.main()
